^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^                                                  ^
^   EEEEE          M       M       A        SSSS   ^
^   EE     nn nn   MM     MM      AAA      SS      ^
^   EEEEE  nnn nn  MMM   MMM     AA AA       SS    ^
^   EE     nn  nn  MM MMM MM    AAAAAAA       SS   ^
^   EEEEE  nn  nn  MM  M  MM   AA     AA   SSSS    ^
^                                                  ^
^      Environment for Multi-Agent Simulation      ^
^                                                  ^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^   Author: Connor Doyle <connor.p.d@gmail.com>    ^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To build the project:
	1. Install the Scala programming language on the system,
	   if you haven't already.
	2. Edit the scala.home property in build.xml to point to
	   your scala installation.
	3. Run Apache Ant in this directory

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To create a new simulation:
	1. Create a new POMDP by supplying the initial state
	2. Implement a subclass of AgentProxy
	3. new SimServer(sim: POMDP, agentBuilder: AgentProxy)

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To create a new agent:
	1. Implement a subclass of AgentClient
	2. Start the client

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
^ TODO:                       ^
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 	- Scaladoc comments
	4	_ package.scala
	5	_ POMDP.scala
	6	_ AgentProxy.scala
	7	_ SimServer.scala

	- Requiring the user to specify an enum of possible keys to the State?
		- at least a chance at inferring a complete transition matrix
	- Create concrete examples as proof-of-concept
	- Implement Debugging Output
	- Implement Logging Output
	   option to save state history to a DB? (datasets will quickly be too large for main mem)
	- Partial implementations for spatial simulations
	- Adapter from spatial sim to <???> rendering engine
	- Create wetware interface from ClientAgent to rat neurons? ;-)